##############################################################################
# Standalone plugin modules are located in ~/escs/

import sys
from os.path import expanduser, join
sys.path.append(join(expanduser('~'), '.escs'))
##############################################################################
# Functions used to load the plugins.

from cspkg.core import load_module, load_cls, chkmap
from cspkg.stderr import printd
##############################################################################
# Use chkmap to remap keystrokes.
# Example:
# Useful for keyboards that have ccedilla key.
# It is handy to get in EXTRA mode quickly.
# from cspkg.plugins.extra_mode import Extra
# from cspkg.plugins.normal_mode import Normal
# from cspkg.core import Main
# chkmap(Extra, {
# (Main, '<Alt-v>'): ((Main, '<Alt-v>'), 
# (Normal, '<Key-ccedilla>'))})

##############################################################################
# Set homedir.
# from cspkg.xstr import Xstr
# Xstr.homedir = expanduser('~')
# printd('Setting home dir:', Xstr.homedir)
##############################################################################
# Basic core modes.

from cspkg.plugins import insert_mode
load_module(insert_mode)

from cspkg.plugins import normal_mode
load_module(normal_mode)

from cspkg.plugins import extra_mode
load_module(extra_mode)

##############################################################################
from cspkg.plugins import tabs
load_module(tabs)

from cspkg.plugins import tab_search
load_module(tab_search)

from cspkg.plugins import splits
load_module(splits)

from cspkg.plugins import text_jumps
load_module(text_jumps)

from cspkg.plugins import mode_status
load_module(mode_status)

from cspkg.plugins import topbar_status
load_module(topbar_status)

from cspkg.plugins import tab_status
load_module(tab_status)

from cspkg.plugins import xsave
load_module(xsave)

from cspkg.plugins import xopen
load_module(xopen)

from cspkg.plugins import xrename
load_module(xrename)

from cspkg.plugins import pane_jumps
load_module(pane_jumps)

from cspkg.plugins import line_scroll
load_module(line_scroll)

from cspkg.plugins import range_sel
load_module(range_sel)

from cspkg.plugins import block_sel
load_module(block_sel)

from cspkg.plugins.find import Find
Find.c_appearance(background='green', foreground='white')
load_cls(Find)

from cspkg.plugins import clipboard
load_module(clipboard)

from cspkg.plugins import text_shift
load_module(text_shift)

from cspkg.plugins import spacing
spacing.TabSpacing.set_scheme({
'.rb': (2, ' '),
'.c' : (4, ' '),
'.cpp' : (4, ' '),
'.java' : (4, ' '),
'.go':(1, '\t'),
'.py': (4, ' '),
'':(4, ' '), })

load_module(spacing)

from cspkg.plugins import code_comments
load_module(code_comments)

from cspkg.plugins import sneak
load_module(sneak)

from cspkg.plugins import fsniffer
load_module(fsniffer)

from cspkg.plugins.project import Project
Project.c_sentinels('.git', '.svn', '.hg', '._')
load_cls(Project)

from cspkg.plugins.qsearch import QSearch
QSearch.c_appearance(background='yellow', foreground='black')
load_cls(QSearch)

from cspkg.plugins.sniper import Sniper
# Sniper.c_dirs('/home/user/projects')
Sniper.c_path('ag')
load_cls(Sniper)

from cspkg.plugins import syslog
load_module(syslog)

from cspkg.plugins import cmd_exec
load_module(cmd_exec)

from cspkg.plugins import line_feed
load_module(line_feed)

from cspkg.plugins import line_index
load_module(line_index)

from cspkg.plugins import line_sel
load_module(line_sel)

from cspkg.plugins import word_sel
load_module(word_sel)

from cspkg.plugins import seq_sel
load_module(seq_sel)

from cspkg.plugins import undo
load_module(undo)

from cspkg.plugins import word_completion
load_module(word_completion)

from cspkg.plugins import jedi
load_module(jedi)

from cspkg.plugins import bck_sel
load_module(bck_sel)

# The mc filenamanager.
# Configure your color scheme with 
# Mc.c_appearance method..
from cspkg.plugins.mc import Mc
# Mc.c_appearance(dir={'foreground': 'red'}, 
# file={'foreground': 'yellow'})
load_cls(Mc)

from cspkg.plugins import cursor_status
load_module(cursor_status)

# Auto completion using ycmd. 
# Warning: Don't use it with jedi auto completion.
# from cspkg.plugins.ycmd import client
# client.YcmdCompletion.setup('~/projects/ycmd-code/ycmd')
# load_module(client)

##############################################################################
# Syntax plugin is used to highlight code.
# It uses python pygments styles to highlight code :)
# Note: When uncommenting a theme dont forget to comment the previously used one.
from cspkg.plugins.syntax.spider import Spider

# Check out more pygments styles.
# from pygments.styles.emacs import EmacsStyle
# from pygments.styles.murphy import MurphyStyle
# from pygments.styles.abap import AbapStyle
# from pygments.styles.borland import BorlandStyle
# from pygments.styles.fruity import FruityStyle
# from pygments.styles.colorful import ColorfulStyle
# from pygments.styles.tango import TangoStyle
# from pygments.styles.trac import TracStyle
# from pygments.styles.igor import IgorStyle
# from pygments.styles.paraiso_dark import ParaisoDarkStyle
# from pygments.styles.vim import VimStyle

# Import and configure VyStyle to highligh code.
from cspkg.plugins.syntax.default_style import EscStyle
Spider.c_style(EscStyle)
load_cls(Spider)
##############################################################################
from cspkg.plugins import codec
from cspkg.plugins import text_strips
from cspkg.plugins import cwords

##############################################################################
# Setup Xstr font type, color and cursor.

def escs_setup(xstr):
    xstr.config(blockcursor=True, 
    undo=True, foreground='yellow', insertbackground='red', 
    background='black', font=('Monospace', 8, 'bold'))

load_cls(escs_setup) 
